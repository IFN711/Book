{"version":3,"sources":["../../../src/Comment/tests/index.test.jsx"],"names":["describe","now","Date","second","minute","hour","day","test","contains","expect","toEqual","stringContaining","not"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAC5B,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AAEA,MAAME,MAAM,GAAG,IAAf;AACA,MAAMC,MAAM,GAAG,KAAKD,MAApB;AACA,MAAME,IAAI,GAAG,KAAKD,MAAlB;AACA,MAAME,GAAG,GAAG,KAAKD,IAAjB;AAEAE,EAAAA,IAAI,CAAC,gDAAD,EAAmD,YAAM;AAC3D,QAAMC,QAAQ,GAAG,GAAjB;AAEAC,IAAAA,MAAM,CAAC,kCAAsBR,GAAtB,CAAD,CAAN,CAAmCS,OAAnC,CAA2CD,MAAM,CAACE,gBAAP,CAAwBH,QAAxB,CAA3C;AACAC,IAAAA,MAAM,CAAC,kCAAsBR,GAAG,GAAG,KAAKG,MAAjC,CAAD,CAAN,CAAiDM,OAAjD,CAAyDD,MAAM,CAACE,gBAAP,CAAwBH,QAAxB,CAAzD;AACAC,IAAAA,MAAM,CAAC,kCAAsBR,GAAG,GAAG,KAAKG,MAAjC,CAAD,CAAN,CAAiDQ,GAAjD,CAAqDF,OAArD,CAA6DD,MAAM,CAACE,gBAAP,CAAwBH,QAAxB,CAA7D;AACD,GANG,CAAJ;AAQAD,EAAAA,IAAI,CAAC,gDAAD,EAAmD,YAAM;AAC3D,QAAMC,QAAQ,GAAG,GAAjB;AAEAC,IAAAA,MAAM,CAAC,kCAAsBR,GAAG,GAAGI,IAA5B,CAAD,CAAN,CAA0CK,OAA1C,CAAkDD,MAAM,CAACE,gBAAP,CAAwBH,QAAxB,CAAlD;AACAC,IAAAA,MAAM,CAAC,kCAAsBR,GAAG,GAAG,KAAKI,IAAjC,CAAD,CAAN,CAA+CK,OAA/C,CAAuDD,MAAM,CAACE,gBAAP,CAAwBH,QAAxB,CAAvD;AACAC,IAAAA,MAAM,CAAC,kCAAsBR,GAAG,GAAG,KAAKI,IAAjC,CAAD,CAAN,CAA+CO,GAA/C,CAAmDF,OAAnD,CAA2DD,MAAM,CAACE,gBAAP,CAAwBH,QAAxB,CAA3D;AACD,GANG,CAAJ;AAQAD,EAAAA,IAAI,CAAC,qCAAD,EAAwC,YAAM;AAChD,QAAMC,QAAQ,GAAG,GAAjB;AAEAC,IAAAA,MAAM,CAAC,kCAAsBR,GAAG,GAAGK,GAA5B,CAAD,CAAN,CAAyCI,OAAzC,CAAiDD,MAAM,CAACE,gBAAP,CAAwBH,QAAxB,CAAjD;AACAC,IAAAA,MAAM,CAAC,kCAAsBR,GAAG,GAAG,MAAMK,GAAlC,CAAD,CAAN,CAA+CI,OAA/C,CAAuDD,MAAM,CAACE,gBAAP,CAAwBH,QAAxB,CAAvD;AACD,GALG,CAAJ;AAMD,CA9BO,CAAR","sourcesContent":["import { getFormattedTimestamp } from '../index';\n\ndescribe('<Comment />', () => {\n  const now = Date.now();\n\n  const second = 1000;\n  const minute = 60 * second;\n  const hour = 60 * minute;\n  const day = 24 * hour;\n\n  test('displays time as minutes only up to 59 minutes', () => {\n    const contains = 'm';\n\n    expect(getFormattedTimestamp(now)).toEqual(expect.stringContaining(contains));\n    expect(getFormattedTimestamp(now - 59 * minute)).toEqual(expect.stringContaining(contains));\n    expect(getFormattedTimestamp(now - 60 * minute)).not.toEqual(expect.stringContaining(contains));\n  });\n\n  test('displays time as hours only from 1 to 23 hours', () => {\n    const contains = 'h';\n\n    expect(getFormattedTimestamp(now - hour)).toEqual(expect.stringContaining(contains));\n    expect(getFormattedTimestamp(now - 23 * hour)).toEqual(expect.stringContaining(contains));\n    expect(getFormattedTimestamp(now - 24 * hour)).not.toEqual(expect.stringContaining(contains));\n  });\n\n  test('displays time as days from 24 hours', () => {\n    const contains = 'd';\n\n    expect(getFormattedTimestamp(now - day)).toEqual(expect.stringContaining(contains));\n    expect(getFormattedTimestamp(now - 100 * day)).toEqual(expect.stringContaining(contains));\n  });\n});\n"],"file":"index.test.js"}